// Generated by CoffeeScript 1.12.2

/*
Status List
0 not connected
1 connecting
2 connected
3 disconncting
4 timeout
5 reconnect
6 error
 */

(function() {
  var Connection, eventEmitter, net, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  net = require('net');

  eventEmitter = require('events').EventEmitter;

  util = require('util');

  Connection = (function() {
    function Connection() {
      this.write = bind(this.write, this);
      this.disconnect = bind(this.disconnect, this);
      this.reconnect = bind(this.reconnect, this);
      this.connect = bind(this.connect, this);
      this.ip = '127.0.0.1';
      this.port = 23;
      this.timeout = 0;
      this.autoReconnect = true;
      this.autoReconnectTime = 5000;
      this.client = new net.Socket();
      this.noDelay = true;
      this.client.on('data', (function(_this) {
        return function(resData) {
          return _this.emit('data', resData);
        };
      })(this));
      this.client.on('timeout', (function(_this) {
        return function() {
          _this.emit('status', 4);
          return _this.emit('statusVb', "timeout on connection to " + _this.ip + " " + _this.port);
        };
      })(this));
      this.client.on('end', (function(_this) {
        return function() {
          _this.emit('statusVb', "end");
          _this.emit('status', 0);
          if (_this.autoReconnect && !_this.manualDisconnect) {
            return _this.reconnect();
          }
        };
      })(this));
      this.client.on('error', (function(_this) {
        return function(data) {
          _this.emit('statusVb', "error " + data);
          _this.emit('status', 6);
          if (_this.autoReconnect) {
            return _this.reconnect();
          }
        };
      })(this));
    }

    Connection.prototype.connect = function(ip, port, timeout) {
      if (ip == null) {
        ip = this.ip;
      }
      if (port == null) {
        port = this.port;
      }
      if (timeout == null) {
        timeout = this.timeout;
      }
      console.log("reconnect = " + this.autoReconnectTime);
      if (net.isIP(ip)) {
        this.ip = ip;
      } else {
        this.emit('statusVb', ip + " is not a valid ip adress");
        this.emit('status', 6);
        return false;
      }
      if ((typeof port === 'number' && (port % 1) === 0) && (0 < port && port < 65535)) {
        this.port = port;
      } else {
        this.emit('statusVb', port + " is nog a valid port number, it must be a interger between 0 and 65535");
        this.emit('status', 6);
        return false;
      }
      if (typeof timeout === 'number' && (timeout % 1) === 0) {
        this.timeout = timeout;
      } else {
        this.emit('statusVb', "timeout has no or a non interger value using default value of " + timeout);
      }
      return this.client.connect(this.port, this.ip, (function(_this) {
        return function() {
          _this.client.setNoDelay(_this.noDelay);
          _this.emit("statusVb", "connecting to " + _this.ip + " " + _this.port);
          _this.emit('status', 1);
          _this.client.setTimeout(_this.timeout, function() {
            _this.emit('statusVb', "timeout triggerd. timeout was set to " + (_this.timeout / 1000) + " second(s)");
            _this.emit('status', 4);
            _this.emit('status', 0);
            _this.client.end();
            _this.client.destroy();
            if (_this.autoReconnect) {
              return _this.reconnect();
            }
          });
          _this.emit('statusVb', 'connected');
          return _this.emit('status', 2);
        };
      })(this));
    };

    Connection.prototype.reconnect = function() {
      this.emit('status', 5);
      this.emit('statusVb', "reconnecting to " + this.ip + " " + this.port + " in " + (this.autoReconnectTime / 1000) + " second(s)");
      return setTimeout((function(_this) {
        return function() {
          return _this.connect();
        };
      })(this), this.autoReconnectTime);
    };

    Connection.prototype.disconnect = function() {
      var error;
      this.manualDisconnect = true;
      try {
        return this.client.end();
      } catch (error1) {
        error = error1;
        return console.log("errrrrrrrror " + error);
      }
    };

    Connection.prototype.write = function(data) {
      return this.client.write(data);
    };

    return Connection;

  })();

  util.inherits(Connection, eventEmitter);

  module.exports = Connection;

}).call(this);
